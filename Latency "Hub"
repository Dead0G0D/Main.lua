local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Anime Eternal üé≠",
    SubTitle = "by Latency",
    TabWidth = 150,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "list" }),
    Dungeon = Window:AddTab({ Title = "Dungeon", Icon = "swords" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options
local runningFarm, runningEnergy, runningDamage, runningDungeon, runningFarmRandom = false, false, false, false, false

-- Fun√ß√£o para pegar os t√≠tulos √∫nicos
local function GetNpcTitles()
    local titles, seen = {}, {}
    for _, npc in ipairs(workspace:WaitForChild("Debris"):WaitForChild("Monsters"):GetChildren()) do
        local title = npc:GetAttribute("Title")
        if title and not seen[title] then
            seen[title] = true
            table.insert(titles, title)
        end
    end
    table.sort(titles)
    return titles
end

-- Auto Energy
Tabs.Main:AddToggle("AutoEnergyToggle", {
    Title = "Auto Energy",
    Default = false
}):OnChanged(function(state)
    runningEnergy = state
    task.spawn(function()
        while runningEnergy do
            local args = { { Action = "_Mouse_Click" } }
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("To_Server"):FireServer(unpack(args))
            task.wait()
        end
    end)
end)

-- Auto Damage
Tabs.Main:AddToggle("AutoDamageToggle", {
    Title = "Auto Energy + Damage",
    Default = false
}):OnChanged(function(state)
    runningDamage = state
    task.spawn(function()
        while runningDamage do
            local selected = Options.NpcTitleDropdown.Value
            if selected then
                for _, npc in ipairs(workspace.Debris.Monsters:GetChildren()) do
                    if npc:GetAttribute("Title") == selected then
                        local id = npc:GetAttribute("Id")
                        if id then
                            local args = {
                                {
                                    Id = id,
                                    Action = "_Mouse_Click"
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("To_Server"):FireServer(unpack(args))
                        end
                    end
                end
            end
            task.wait()
        end
    end)
end)

-- Auto Farm por Dropdown
Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "Auto Farm",
    Default = false
}):OnChanged(function(value)
    runningFarm = value
    task.spawn(function()
        while runningFarm and task.wait() do
            local selected = Options.NpcTitleDropdown.Value
            if selected then
                for _, npc in ipairs(workspace.Debris.Monsters:GetChildren()) do
                    if npc:GetAttribute("Title") == selected and npc:FindFirstChild("HumanoidRootPart") then
                        local hrp = npc.HumanoidRootPart
                        local plr = game.Players.LocalPlayer.Character
                        if plr and plr:FindFirstChild("HumanoidRootPart") then
                            plr.HumanoidRootPart.CFrame = hrp.CFrame + Vector3.new(-4, 1, 0)
                            break
                        end
                    end
                end
            end
        end
    end)
end)

-- Farm Random (todos da pasta)
Tabs.Main:AddToggle("FarmRandomToggle", {
    Title = "Farm Random",
    Default = false
}):OnChanged(function(state)
    runningFarmRandom = state
    task.spawn(function()
        while runningFarmRandom and task.wait() do
            local plr = game.Players.LocalPlayer.Character
            if not plr or not plr:FindFirstChild("HumanoidRootPart") then continue end

            for _, npc in ipairs(workspace:WaitForChild("Debris"):WaitForChild("Monsters"):GetChildren()) do
                if not runningFarmRandom then break end
                if npc:FindFirstChild("HumanoidRootPart") then
                    plr.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame + Vector3.new(-4, 1, 0)
                    task.wait(0.25)
                end
            end
        end
    end)
end)

-- Dropdown de inimigos
Tabs.Main:AddDropdown("NpcTitleDropdown", {
    Title = "Enemies",
    Values = GetNpcTitles(),
    Multi = false,
    Default = nil
}):OnChanged(function(value)
    print("Selecionou o NPC:", value)
end)

-- Bot√£o para atualizar a lista de NPCs
Tabs.Main:AddButton({
    Title = "üîÅ Refresh List",
    Description = "Atualiza os NPCs",
    Callback = function()
        Options.NpcTitleDropdown:SetValues(GetNpcTitles())
        Fluent:Notify({ Title = "Atualizado!", Content = "NPCs recarregados com sucesso.", Duration = 1 })
    end
})

-- Dropdown de sele√ß√£o de Dungeon
Tabs.Dungeon:AddDropdown("DungeonDropdown", {
    Title = "Dungeon Name",
    Values = { "Dungeon_Easy", "Dungeon_Medium", "Dungeon_Hard", "Dungeon_Insane", "Leaf_Raid" },
    Multi = false,
    Default = nil
})

-- Auto Join Dungeon Toggle
Tabs.Dungeon:AddToggle("AutoJoinDungeon", {
    Title = "Auto Join",
    Default = false
}):OnChanged(function(state)
    runningDungeon = state
    task.spawn(function()
        while runningDungeon do
            local selectedDungeon = Options.DungeonDropdown.Value
            if selectedDungeon then
                local args = {
                    {
                        Action = "_Enter_Dungeon",
                        Name = selectedDungeon
                    }
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("To_Server"):FireServer(unpack(args))
            end
            task.wait(2)
        end
    end)
end)

-- Configura√ß√µes
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/NPC-Title-System")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)
SaveManager:LoadAutoloadConfig()
Tabs.Main:ForceCanvas()

Fluent:Notify({
    Title = "Fluent UI",
    Content = "Interface carregada com sucesso!",
    Duration = 2
})
